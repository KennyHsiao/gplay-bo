<?php

namespace App\Admin\Controllers;

use Xn\Admin\Auth\Permission;
use Xn\Admin\Layout\Content;
use Illuminate\Routing\Controller;
use Illuminate\Support\Facades\Request;
use Xn\Admin\Controllers\HasResourceActions;
use Xn\Admin\Facades\Admin;

class AdminController extends Controller
{
    use HasResourceActions;

    protected $switch_online, $switch_yesno;

    protected $select_item, $select_public, $select_open, $select_online;

    static $seg2, $seg3, $seg4, $seg5, $seg6;

    static $imagePath;

    function __construct() {
    }

    public function callAction($method, $parameters)
    {
        $this->init();
        static::$seg2 = Request::segment(2);
        static::$seg3 = Request::segment(3);
        static::$seg4 = Request::segment(4);
        static::$seg5 = Request::segment(5);
        static::$seg6 = Request::segment(6);
        static::$imagePath = "photos/" . Admin::user()->id;

        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }

    /**
     * Title for current resource.
     *
     * @var string
     */
    protected $title = 'Title';

    /**
     * Set description for following 4 action pages.
     *
     * @var array
     */
    protected $description = [
//        'index'  => 'Index',
//        'show'   => 'Show',
//        'edit'   => 'Edit',
//        'create' => 'Create',
    ];

    /**
     * Get content title.
     *
     * @return string
     */
    protected function title()
    {
        return __($this->title);
    }

    /**
     * Index interface.
     *
     * @param Content $content
     *
     * @return Content
     */
    public function index(Content $content)
    {
        // if (!\Admin::user()->can($this->getPermissionSlug().".watch")) {
        //     return Permission::error();
        // }

        return $content
            ->title($this->title())
            ->description($this->description['index'] ?? trans('admin.list'))
            ->body($this->grid());
    }

    /**
     * Show interface.
     *
     * @param mixed   $id
     * @param Content $content
     *
     * @return Content
     */
    public function show($id, Content $content)
    {
        // if (!\Admin::user()->can($this->getPermissionSlug().".show")) {
        //     return Permission::error();
        // }

        return $content
            ->title($this->title())
            ->description($this->description['show'] ?? trans('admin.show'))
            ->body($this->detail($id));
    }

    /**
     * Edit interface.
     *
     * @param mixed   $id
     * @param Content $content
     *
     * @return Content
     */
    public function edit($id, Content $content)
    {
        // if (!\Admin::user()->can($this->getPermissionSlug().".edit")) {
        //     return Permission::error();
        // }

        return $content
            ->title($this->title())
            ->description($this->description['edit'] ?? trans('admin.edit'))
            ->body($this->form()->edit($id));
    }

    /**
     * Create interface.
     *
     * @param Content $content
     *
     * @return Content
     */
    public function create(Content $content)
    {
        // if (!Admin::user()->can($this->getPermissionSlug().".create")) {
        //     return Permission::error();
        // }

        return $content
            ->title($this->title())
            ->description($this->description['create'] ?? trans('admin.create'))
            ->body($this->form());
    }

    /**
     * 取得权限的
     *
     * @return void
     */
    protected function getPermissionSlug() {
        $controller = explode("\\",get_class($this));
        $controller = str_ireplace('controller', '', end($controller));
        return strtolower($controller);
    }

    /**
     * 初始化
     *
     * @return void
     */
    protected function init() {
        $this->switch_online = [
            'on' => ['value' => 1, 'text' => __('common.switch_online.on'), 'color' => 'warning'],
            'off' => ['value' => 0, 'text' => __('common.switch_online.off'), 'color' => 'success'],
        ];
        $this->switch_yesno = [
            'on' => ['value' => 1, 'text' => __('common.switch_yesno.on'), 'color' => 'success'],
            'off' => ['value' => 0, 'text' => __('common.switch_yesno.off'), 'color' => 'warning'],
        ];

        $this->select_item =[
            0 => __('common.gf_status.maintain'),
            1 => __('common.gf_status.open'),
            2 => __('common.gf_status.remove'),
        ];

        $this->select_public = [
            0 => __('common.switch_public.off'),
            1 => __('common.switch_public.on')
        ];

        $this->select_open = [
            0 => __('common.switch_open.off'),
            1 => __('common.switch_open.on')
        ];

        $this->select_online = [
            0 => __('common.switch_online.off'),
            1 => __('common.switch_online.on')
        ];
        //
        session()->put('permission', [
            'create' => Admin::user()->can($this->getPermissionSlug().".create"),
            'watch' => Admin::user()->can($this->getPermissionSlug().".watch"),
            'update' => Admin::user()->can($this->getPermissionSlug().".edit"),
            'delete' => Admin::user()->can($this->getPermissionSlug().".delete"),
            // 'all' => Admin::user()->can($this->getPermissionSlug()),
            // 'payment.edit' => Admin::user()->can($this->getPermissionSlug().".status.edit"),
            // 'bank.edit' => Admin::user()->can($this->getPermissionSlug().".status.edit"),
            // 'checkwithdrawal.edit' => Admin::user()->can($this->getPermissionSlug().".checkwithdrawal.edit"),
            // 'approvewithdrawal.edit' => Admin::user()->can($this->getPermissionSlug().".approvewithdrawal.edit"),
            // 'returnwithdrawal.edit' => Admin::user()->can($this->getPermissionSlug().".returnwithdrawal.edit"),
            // 'account.edit' => Admin::user()->can($this->getPermissionSlug().".account.edit"),
            // 'grouplevelcode.edit' => Admin::user()->can($this->getPermissionSlug().".grouplevelcode.edit"),
            // 'grouplevelcode.watch' => Admin::user()->can($this->getPermissionSlug().".grouplevelcode.watch"),
            // 'paymentgroup.edit' => Admin::user()->can($this->getPermissionSlug().".paymentgroup.edit"),
            // 'paymentgroup.watch' => Admin::user()->can($this->getPermissionSlug().".paymentgroup.watch"),
            // 'blockmember.edit' => Admin::user()->can($this->getPermissionSlug().".blockmember.edit"),
            // 'unblockmember.edit' => Admin::user()->can($this->getPermissionSlug().".unblockmember.edit"),
            // 'passwordreset.edit' => Admin::user()->can($this->getPermissionSlug().".passwordreset.edit"),
            // 'chargereset.edit' => Admin::user()->can($this->getPermissionSlug().".chargereset.edit"),
            // 'bowithdrawal.edit' => Admin::user()->can($this->getPermissionSlug().".bowithdrawal.edit"),
            // 'bodeposit.edit' => Admin::user()->can($this->getPermissionSlug().".bodeposit.edit"),
            // 'paymentchannel.edit' => Admin::user()->can($this->getPermissionSlug().".name.edit"),
            // 'needbankcode.edit' => Admin::user()->can($this->getPermissionSlug()."needbankcode.edit"),
        ]);
    }
}
